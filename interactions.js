const { ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionsBitField, MessageFlags } = require('discord.js');
const { renderBoard, createButtons, disableAllButtons, checkWinner, minimax } = require('./gameUtils');

async function handleInteraction(interaction, games, arenas, invites) {
    if (!interaction.isChatInputCommand()) {
        if (interaction.isButton()) await handleButton(interaction, games, arenas, invites);
        return;
    }

    const { commandName, options, channelId, guild, client } = interaction;

    if (commandName === 'xo') {
        const subcommand = options.getSubcommand();

        if (subcommand === 'create-room') {
            let arenaChannel = arenas.get(guild.id);
            if (arenaChannel) {
                const channelExists = guild.channels.cache.get(arenaChannel.id);
                if (channelExists) {
                    return await interaction.reply(`**‚öîÔ∏è ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!** ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà ${arenaChannel} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°!`);
                } else {
                    arenas.delete(guild.id);
                }
            }
            try {
                await interaction.deferReply();
                const existingChannel = guild.channels.cache.find(channel => channel.name === 'xo-arena');
                if (existingChannel) {
                    arenas.set(guild.id, existingChannel);
                    const message = await existingChannel.send({
                        content: `**üî• ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö Tic-Tac-Toe ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß! üî•**\n‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°!`,
                        components: [
                            new ActionRowBuilder().addComponents(
                                new ButtonBuilder()
                                    .setCustomId('start_game')
                                    .setLabel('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°')
                                    .setStyle(ButtonStyle.Success)
                            ),
                        ],
                    });
                    games.set(existingChannel.id, { 
                        channelId: existingChannel.id, 
                        messageId: message.id, 
                        status: 'waiting' 
                    });
                    await interaction.editReply(`**‚öîÔ∏è ‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö‡πÄ‡∏î‡∏¥‡∏°!** ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà ${existingChannel} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ!`);
                } else {
                    const channel = await guild.channels.create({
                        name: 'xo-arena',
                        type: 0,
                        permissionOverwrites: [
                            { id: guild.id, deny: [PermissionsBitField.Flags.ViewChannel] },
                            { id: interaction.user.id, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages] },
                            { id: client.user.id, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages] },
                        ],
                    });
                    arenas.set(guild.id, channel);
                    const message = await channel.send({
                        content: `**üî• ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö Tic-Tac-Toe ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß! üî•**\n‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°!`,
                        components: [
                            new ActionRowBuilder().addComponents(
                                new ButtonBuilder()
                                    .setCustomId('start_game')
                                    .setLabel('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°')
                                    .setStyle(ButtonStyle.Success)
                            ),
                        ],
                    });
                    games.set(channel.id, { 
                        channelId: channel.id, 
                        messageId: message.id, 
                        status: 'waiting' 
                    });
                    await interaction.editReply(`**‚öîÔ∏è ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°!** ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà ${channel} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ!`);
                }
            } catch (error) {
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö:', error);
                await interaction.editReply('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö‡πÑ‡∏î‡πâ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
            }
        } else if (subcommand === 'invite') {
            const user = options.getUser('user');
            const arenaChannel = arenas.get(guild.id);
            if (!arenaChannel) {
                return await interaction.reply('**‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö!** ‡πÉ‡∏ä‡πâ `/xo create-room` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô');
            }
            const channelExists = guild.channels.cache.get(arenaChannel.id);
            if (!channelExists) {
                arenas.delete(guild.id);
                return await interaction.reply('**‚ùå ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö‡∏´‡∏≤‡∏¢‡πÑ‡∏õ!** ‡πÉ‡∏ä‡πâ `/xo create-room` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà');
            }
            if (user.id === interaction.user.id) {
                return await interaction.reply({ content: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏¥‡∏ç‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ!', flags: MessageFlags.Ephemeral });
            }
            try {
                const inviteMessage = await arenaChannel.send({
                    content: `**üîî ${interaction.user.username} ‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏¥‡∏ç ${user.username} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö!**\n‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò!`,
                    components: [
                        new ActionRowBuilder().addComponents(
                            new ButtonBuilder()
                                .setCustomId('accept_invite')
                                .setLabel('‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö')
                                .setStyle(ButtonStyle.Success),
                            new ButtonBuilder()
                                .setCustomId('decline_invite')
                                .setLabel('‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò')
                                .setStyle(ButtonStyle.Danger)
                        ),
                    ],
                });
                invites.set(inviteMessage.id, {
                    inviter: interaction.user,
                    invitee: user,
                    channelId: arenaChannel.id,
                });
                await interaction.reply({ content: `**üîî ‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ñ‡∏∂‡∏á ${user.username} ‡πÅ‡∏•‡πâ‡∏ß!** ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô ${arenaChannel}`, flags: MessageFlags.Ephemeral });
            } catch (error) {
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç:', error);
                await interaction.reply({ content: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÑ‡∏î‡πâ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', flags: MessageFlags.Ephemeral });
            }
        }
    }
}

async function handleButton(interaction, games, arenas, invites) {
    try {
        await interaction.deferUpdate({ withResponse: false });

        const channelId = interaction.channelId;
        let game = games.get(channelId);

        if (interaction.customId === 'start_game') {
            if (!game || game.status !== 'waiting') {
                return;
            }
            const board = Array(9).fill(null);
            if (game.inviter && game.invitee) {
                game = {
                    board,
                    currentPlayer: 'X',
                    playerX: game.inviter,
                    playerO: game.invitee,
                    status: 'ongoing',
                    mode: 'pvp',
                    channelId: channelId,
                    turns: 0,
                    messageId: game.messageId,
                    rounds: { playerX: 0, playerO: 0 },
                    currentRound: 1,
                };
            } else {
                game = {
                    board,
                    currentPlayer: 'X',
                    playerX: interaction.user,
                    playerO: interaction.client.user,
                    status: 'ongoing',
                    mode: 'pve',
                    channelId: channelId,
                    turns: 0,
                    messageId: game.messageId,
                    rounds: { playerX: 0, playerO: 0 },
                    currentRound: 1,
                };
            }
            games.set(channelId, game);
            try {
                const channel = await interaction.client.channels.fetch(channelId);
                const message = await channel.messages.fetch(game.messageId);
                await message.edit({
                    content: `**üî• ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö Tic-Tac-Toe üî•**\n${renderBoard(game)}\n**‚ùå ‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á ${game.playerX.username}! ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏¢! üî•**`,
                    components: createButtons(game),
                });
            } catch (error) {
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°:', error);
            }
            return;
        }

        if (interaction.customId === 'accept_invite' || interaction.customId === 'decline_invite') {
            const invite = invites.get(interaction.message.id);
            if (!invite) {
                return;
            }
            if (interaction.user.id !== invite.invitee.id) {
                return;
            }
            const channel = await interaction.client.channels.fetch(invite.channelId);
            if (interaction.customId === 'accept_invite') {
                try {
                    await channel.permissionOverwrites.edit(invite.invitee, {
                        ViewChannel: true,
                        SendMessages: true,
                    });
                    if (games.get(channel.id)) {
                        games.delete(channel.id);
                    }
                    const message = await channel.send({
                        content: `**üî• ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö Tic-Tac-Toe ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß! üî•**\n‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° PvP ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á ${invite.inviter.username} ‡πÅ‡∏•‡∏∞ ${invite.invitee.username}!`,
                        components: [
                            new ActionRowBuilder().addComponents(
                                new ButtonBuilder()
                                    .setCustomId('start_game')
                                    .setLabel('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°')
                                    .setStyle(ButtonStyle.Success)
                            ),
                        ],
                    });
                    games.set(channel.id, {
                        status: 'waiting',
                        channelId: channel.id,
                        messageId: message.id,
                        inviter: invite.inviter,
                        invitee: invite.invitee,
                        mode: 'pvp',
                    });
                    await interaction.message.edit({
                        content: `**‚úÖ ${invite.invitee.username} ‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏à‡∏≤‡∏Å ${invite.inviter.username}!**`,
                        components: [],
                    });
                } catch (error) {
                    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° PvP:', error);
                    await interaction.followUp({ content: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° PvP ‡πÑ‡∏î‡πâ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!', ephemeral: true });
                }
            } else {
                try {
                    await channel.send(`**‚ùå ${invite.invitee.username} ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏£‡∏ö!**`);
                    await interaction.message.edit({
                        content: `**‚ùå ${invite.invitee.username} ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏à‡∏≤‡∏Å ${invite.inviter.username}!**`,
                        components: [],
                    });
                } catch (error) {
                    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç:', error);
                    await interaction.followUp({ content: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÑ‡∏î‡πâ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!', ephemeral: true });
                }
            }
            invites.delete(interaction.message.id);
            return;
        }

        if (interaction.customId === 'start_new_game') {
            const arenaChannel = arenas.get(interaction.guild.id);
            if (!arenaChannel) {
                return;
            }
            const channel = await interaction.client.channels.fetch(arenaChannel.id);
            if (!channel) {
                arenas.delete(interaction.guild.id);
                return;
            }
            const board = Array(9).fill(null);
            game = {
                board,
                currentPlayer: 'X',
                playerX: interaction.user,
                playerO: interaction.client.user,
                status: 'ongoing',
                mode: 'pve',
                channelId: arenaChannel.id,
                turns: 0,
                messageId: null,
                rounds: { playerX: 0, playerO: 0 },
                currentRound: 1,
            };
            games.set(arenaChannel.id, game);
            try {
                const messages = await channel.messages.fetch({ limit: 1 });
                const latestMessage = messages.first();
                if (latestMessage) {
                    game.messageId = latestMessage.id;
                    await latestMessage.edit({
                        content: `**üî• ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö Tic-Tac-Toe üî•**\n${renderBoard(game)}\n**‚ùå ‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á ${game.playerX.username}! ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏¢! üî•**`,
                        components: createButtons(game),
                    });
                } else {
                    const message = await channel.send({
                        content: `**üî• ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö Tic-Tac-Toe üî•**\n${renderBoard(game)}\n**‚ùå ‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á ${game.playerX.username}! ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏¢! üî•**`,
                        components: createButtons(game),
                    });
                    game.messageId = message.id;
                }
            } catch (error) {
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà:', error);
            }
            return;
        }

        if (interaction.customId === 'start_new_round') {
            if (!game || game.status !== 'finished') {
                return;
            }
            try {
                const channel = await interaction.client.channels.fetch(channelId);
                const message = await channel.messages.fetch(game.messageId);
                game.board = Array(9).fill(null);
                game.currentPlayer = 'X';
                game.status = 'ongoing';
                game.turns = 0;
                game.currentRound++;
                games.set(channelId, game);
                await message.edit({
                    content: `**üî• ‡∏£‡∏≠‡∏ö ${game.currentRound}/3: ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö Tic-Tac-Toe üî•**\n${renderBoard(game)}\n**‚ùå ‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á ${game.playerX.username}! ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏¢! üî•**`,
                    components: createButtons(game),
                });
            } catch (error) {
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà:', error);
            }
            return;
        }

        if (interaction.customId === 'cancel_game') {
            if (!game || game.status !== 'ongoing') {
                return;
            }
            try {
                const channel = await interaction.client.channels.fetch(channelId);
                const message = await channel.messages.fetch(game.messageId);
                games.delete(channelId);
                await message.edit({
                    content: `**üî• ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö Tic-Tac-Toe ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß! üî•**\n‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°!`,
                    components: [
                        new ActionRowBuilder().addComponents(
                            new ButtonBuilder()
                                .setCustomId('start_game')
                                .setLabel('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°')
                                .setStyle(ButtonStyle.Success)
                        ),
                    ],
                });
                games.set(channelId, { 
                    channelId: channel.id, 
                    messageId: message.id, 
                    status: 'waiting' 
                });
            } catch (error) {
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏Å‡∏°:', error);
            }
            return;
        }

        if (!game || game.status !== 'ongoing' || (game.currentPlayer === 'X' && game.playerX.id !== interaction.user.id) || (game.currentPlayer === 'O' && game.playerO.id !== interaction.user.id)) {
            return;
        }

        const position = parseInt(interaction.customId) - 1;
        if (game.board[position] !== null) {
            return;
        }

        game.board[position] = game.currentPlayer;
        game.turns++;
        const result = checkWinner(game.board);
        const channel = await interaction.client.channels.fetch(channelId);
        try {
            const message = await channel.messages.fetch(game.messageId);
            if (result) {
                game.status = 'finished';
                let reply;
                let components;
                let finalReply = '';
                if (result === 'draw') {
                    reply = `**‚öîÔ∏è ‡∏£‡∏≠‡∏ö ${game.currentRound}/3: ‡πÄ‡∏™‡∏°‡∏≠! ‚öîÔ∏è**\n‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${game.playerX.username} ${game.rounds.playerX} - ${game.rounds.playerO} ${game.playerO.username}`;
                } else {
                    const winner = result === 'X' ? game.playerX : game.playerO;
                    game.rounds[result === 'X' ? 'playerX' : 'playerO']++;
                    reply = `**üèÜ ‡∏£‡∏≠‡∏ö ${game.currentRound}/3: ${winner.username} ‡∏ä‡∏ô‡∏∞!**\n‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${game.playerX.username} ${game.rounds.playerX} - ${game.rounds.playerO} ${game.playerO.username}`;
                }
                if (game.mode === 'pvp' && game.currentRound < 3 && game.rounds.playerX < 2 && game.rounds.playerO < 2) {
                    components = [
                        new ActionRowBuilder().addComponents(
                            new ButtonBuilder()
                                .setCustomId('start_new_round')
                                .setLabel('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà')
                                .setStyle(ButtonStyle.Success)
                        ),
                    ];
                } else {
                    if (game.rounds.playerX >= 2) {
                        finalReply = `**üèÜ ${game.playerX.username} ‡∏ä‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô 2/3! üèÜ**`;
                    } else if (game.rounds.playerO >= 2) {
                        finalReply = `**üèÜ ${game.playerO.username} ‡∏ä‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô 2/3! üèÜ**`;
                    } else {
                        finalReply = `**‚öîÔ∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏à‡∏ö‡∏•‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ú‡∏•‡πÄ‡∏™‡∏°‡∏≠! ‚öîÔ∏è**`;
                    }
                    components = [
                        new ActionRowBuilder().addComponents(
                            new ButtonBuilder()
                                .setCustomId('start_new_game')
                                .setLabel('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà')
                                .setStyle(ButtonStyle.Success)
                        ),
                    ];
                    games.delete(channelId);
                }
                await message.edit({
                    content: `**üèÜ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏≠‡∏ö ${game.currentRound}/3 üèÜ**\n${renderBoard(game)}\n${reply}\n${finalReply}`,
                    components,
                });
                return;
            }

            game.currentPlayer = game.currentPlayer === 'X' ? 'O' : 'X';
            games.set(channelId, game);
            if (game.mode === 'pve' && game.currentPlayer === 'O') {
                await message.edit({
                    content: `**üî• ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö Tic-Tac-Toe üî•**\n${renderBoard(game)}\n**‚≠ï Bot ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏à‡∏°‡∏ï‡∏µ! ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡πÇ‡∏ï‡πâ...**`,
                    components: createButtons(game),
                });
                await aiMove(game, interaction.guild, channel, games);
            } else {
                await message.edit({
                    content: `**üî• ‡∏£‡∏≠‡∏ö ${game.currentRound}/3: ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö Tic-Tac-Toe üî•**\n${renderBoard(game)}\n**${game.currentPlayer === 'X' ? '‚ùå' : '‚≠ï'} ‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á ${game.currentPlayer === 'X' ? game.playerX.username : game.playerO.username}! ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏¢! üî•**`,
                    components: createButtons(game),
                });
            }
        } catch (error) {
            console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:', error);
        }
    } catch (error) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô handleButton:', error);
        if (!interaction.deferred && !interaction.replied) {
            await interaction.followUp({ content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏õ‡∏∏‡πà‡∏°!', ephemeral: true }).catch(() => {});
        }
    }
}

async function aiMove(game, guild, channel, games) {
    const { board, channelId } = game;
    const { move } = minimax(board, 0, true);
    game.board[move] = 'O';
    game.turns++;
    const result = checkWinner(game.board);
    try {
        const message = await channel.messages.fetch(game.messageId);
        if (result) {
            game.status = 'finished';
            const reply = result === 'draw' ? '**‚öîÔ∏è ‡∏£‡∏≠‡∏ö 1/3: ‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°‡∏à‡∏ö‡∏•‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ú‡∏•‡πÄ‡∏™‡∏°‡∏≠! ‚öîÔ∏è**' : `**‚≠ï  Bot ‡∏Ñ‡∏£‡∏≠‡∏á‡∏ä‡∏±‡∏¢!**`;
            const components = [
                new ActionRowBuilder().addComponents(
                    new ButtonBuilder()
                        .setCustomId('start_new_game')
                        .setLabel('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà')
                        .setStyle(ButtonStyle.Success)
                ),
            ];
            await message.edit({
                content: `**üèÜ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏≠‡∏ö 1/3 üèÜ**\n${renderBoard(game)}\n${reply}`,
                components,
            });
            games.delete(channelId);
            return;
        }

        game.currentPlayer = 'X';
        games.set(channelId, game);
        await message.edit({
            content: `**üî• ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏ö Tic-Tac-Toe üî•**\n${renderBoard(game)}\n**‚ùå ‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á ${game.playerX.username}! ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏¢! üî•**`,
            components: createButtons(game),
        });
    } catch (error) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:', error);
    }
}

module.exports = { handleInteraction };